nazadnje smo gledal defenzivno programiranje!
raje dajmo iskat balance med varnostjo in zmogljivostjo!
dovolj secure in maintainable...

ko ščitimo tuje sisteme imamo neke toole k gledajo kaj program dela da 



landlock
in secure computing...

kaj je delal seccomp?
omejuje sistemske klice

in znotraj lahko omejimo parametre? npr katere argumente znotraj sistemskih klicov

eksplicitno določimo pravila za uporabo!

kaj naredi cat.c

prebere nek file in sprinta nek buffer k ga je prebral

imamo standarden overflow 512 imamo nastavljen buffer
beremo pa 1024

./cat exploit.txt 
dobimo direkt shell

kako bi spisal filter in pravilo da se to ne more zgodit

zato imamo program protect.c

ki trenutno samo prebere nek program zalaufa stvari in zalaufa program


s protectom lahko ./cat securely executamo

./protect ./cat cat.c
to naj bi varno pognal kodo

preberemo manual
man seccomp

sestavljen je iz 3delov

1. zalafamo seccomp kontekst in mu dodamo
seccomp_init -> seccomp_rule_add -> seccomp_load

pogledamo man init

v examplu imamo en kontekst
seccomp_init(SCMP_ACT_KILL) kaj je to tuki notr?


to je nek default
lahko pa za posameznega določimo kaj gre skoz in kaj ne

zdaj moramo dodajat pravila
seccomp_rule_add


katere stvari pa bomo dovolili

zato dodamo
scmp_filter_ctx ctx = seccomp_init(SCMP_ACT_KILL)
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(read),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(write),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(open),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(close),0 )


in zdaj še ta pravila naložimo

seccomp_load(ctx);//od tu naprej začne veljati za naš program



make
./protect ./cat ./cat.c

ampak vrne error
invalid system call (core dumped)

imamo tudi program z imenom strace //napišemo ga spredi


in vidimo da se spodaj nastavi nek filter ki vrne 0 //vse uspešno
in takoj v nasledni vrstici poženemo cat

seccomp začne delovat ko napišemo seccomp_load(ctx)
uporabimo ga da zaščitimo trenutni program


morali bi dodati še izvajanje programa
še exec, kar je pa kontra našemo default k naj bi lahko samo ta program ctx zakaufal


zdaj crkne pri brk funkciji


in dodamo še brk

seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(brk),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(arch_prctl),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(set_tid_address),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(set_robust_list),0 )
seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(rseq),0 )

to so vsi neki syscalli da program sploh lahko dela, ne glede na vsebino programa.

in to je neverjetno nadležno pisat!

fedora je freaky!

Security-Enhanced Linux
za vsak program lahko daš še profil kako more ta zadeva laufat
secc Linux + par detajlov

imajo pa zanimivo funkcionalnost
zadeva zna laufat v treh statih

zagnana
ugasnjena
samo reporta violation ki jih je program naredil



in še en dodaten ukaz, gre pogledat v en log in pogleda katere violatone da
in lahko samo rece, TE VSE POTREBUJEM

strae ./cat cat.c 2> /tmp/profile
vse syscalle in standard erorje dobimo notr v naso datoteko

in če odpremo ta tmp/profile dobimo listo vseh prog ki jih potrebujemo


in cat /tmp/profile | cut -d'(' -f1 | sort | uniq

in tako dobimo vse syscalle ki jih potrebujemo



probajmo ce dela
in DELA! (po sreci!)

ker nismo direkt klical exec za pognat shell, smo omejili se nekaj klicev
imeli smo system().


kako bi pa omejili da ne execamo kaj drugega ampak samo tale cat?
omejimo prvi argument filename in samo damo pot do našega cat programa

zato omejimo filename
namesto 0, damo argument


ker mi v bistvu pošiljamo samo addr lahko katerikol addr omejimo
najlažji fix za to zadevo je da samo castamo vse v long
in samo pogledamo ali je tam pravi naslov

ampak imamo spet problem, če bi na ta naslov napadalec dal karkoli drugega bi lahko tudi to izvedel
not the best 
TO je prva omejitev seccomp!
//ampak v praksi je to že zelo dobra rešitev

večina je v read only memmoriju
in to delamo z funkcijo mprotect ki pa smo jo dovolil

napadalec se bi moral dosti bolj potrudit da pride mimo seccompa ! ni pa nemogoče

seccomp_rule_add(ctx, SCMP_ACT_ALLOW,SCMP_SYS(execve),1,//damo enko
	SCMP_A0(SCMP_CMP_EQ, (long)argv[1]) 
)

ta problem bi fixal bolj high level -> landlock
priporočena je uporaba apparmorja


landlock je bolj nova zadeva, veliko stvari sploh ni v standardnih knjiznicah

direkt na kernel.org imajo landlock.html (zelo dober manual)


kako se razlikuje od seccompa
seccomp samo gleda sistemske klice

landlock pa tudi filesystem rule in network rule

vsi calli k delajo z filesystemom in networkom, grejo čez postopek pregleda omejitev

še vedno bi lahko imeli TOU in TOC bug, ampak takrat ko bi dostopal do ranljive datoteke bi landlock kljub ROC ranljivosti blokiral napad


mi se bomo bolj ukvarjal z filesystemom

struct landlock_ruleset_attr ruleset_attr = {
    .handled_access_fs =
        LANDLOCK_ACCESS_FS_EXECUTE |
        LANDLOCK_ACCESS_FS_WRITE_FILE |
        LANDLOCK_ACCESS_FS_READ_FILE |
        LANDLOCK_ACCESS_FS_READ_DIR |
        LANDLOCK_ACCESS_FS_REMOVE_DIR |
        LANDLOCK_ACCESS_FS_REMOVE_FILE |
        LANDLOCK_ACCESS_FS_MAKE_CHAR |
        LANDLOCK_ACCESS_FS_MAKE_DIR |
        LANDLOCK_ACCESS_FS_MAKE_REG |
        LANDLOCK_ACCESS_FS_MAKE_SOCK |
        LANDLOCK_ACCESS_FS_MAKE_FIFO |
        LANDLOCK_ACCESS_FS_MAKE_BLOCK |
        LANDLOCK_ACCESS_FS_MAKE_SYM |
        LANDLOCK_ACCESS_FS_REFER |
        LANDLOCK_ACCESS_FS_TRUNCATE |
        LANDLOCK_ACCESS_FS_IOCTL_DEV,
    .handled_access_net =
        LANDLOCK_ACCESS_NET_BIND_TCP |
        LANDLOCK_ACCESS_NET_CONNECT_TCP,
    .scoped =
        LANDLOCK_SCOPE_ABSTRACT_UNIX_SOCKET |
        LANDLOCK_SCOPE_SIGNAL,
};


//networka sploh ne potrebujemo VEN
//scope tudi ne potrebujemo
//vidimo da veliko od teh access_fs sploh ne potrebujemo

to damo v našo kodo iz spletne strani
kljub temo da imamo execute ze prej dovoljen ga bo treba tudi tu spustiti skoz.
Write ne potrebujemo





pretty much uporabljamo samo execute in write_file -> 

ta naš ruleset ki ga damo, kaj vse naj bi šlo skoz naš rulesec
moramo specifično povedat kaj vse bomo omejeval

in pustimo samo tiste ki jih bomo

struct landlock_ruleset_attr ruleset_attr = {
    .handled_access_fs =
        LANDLOCK_ACCESS_FS_EXECUTE |
        LANDLOCK_ACCESS_FS_WRITE_FILE |
        LANDLOCK_ACCESS_FS_READ_FILE |
        LANDLOCK_ACCESS_FS_READ_DIR |
        LANDLOCK_ACCESS_FS_REMOVE_DIR |
        LANDLOCK_ACCESS_FS_REMOVE_FILE |
        LANDLOCK_ACCESS_FS_MAKE_CHAR |
        LANDLOCK_ACCESS_FS_MAKE_DIR |
        LANDLOCK_ACCESS_FS_MAKE_REG |
        LANDLOCK_ACCESS_FS_MAKE_SOCK |
        LANDLOCK_ACCESS_FS_MAKE_FIFO |
        LANDLOCK_ACCESS_FS_MAKE_BLOCK |
        LANDLOCK_ACCESS_FS_MAKE_SYM |
        LANDLOCK_ACCESS_FS_REFER |
        LANDLOCK_ACCESS_FS_TRUNCATE |
        LANDLOCK_ACCESS_FS_IOCTL_DEV,
};





int landlock_fd = syscall(SYS_landlock_create_ruleset, &ruleset_attr, sizeof(ruleset_attr),0)

in zadeva vrne ruleset file descriptor //isto kot ctx

in zdaj imamo funkcionalnost 
landlock_add_rule
vidimo da imamo samo 2 tipa rulov,
landlock_rule_path_beneath in landlock_rule_net_port




preden damo to notr je treba se struct definirat
vse kar je pod fd na to se bo nanašalo


kaj bo potem parent_fd?
-> naš working directory

char path[4096]
int cwd = getcwd(path, 0_PATH)


//ker zadeva zahteva odprt file descriptor bo tole super


struct landlock_path_beneath_attr path_attr =  {
	-allowed_access =
	LANDLOCK_ACCESS_FS_EXECUTE |
	LANDLOCK_ACCESS_FS_READ_FILE,
	-parent_fd = cwd,
}

zdaj moramo pa še dejansko zalaufat syscall da dodamo rule

syscall(SYS_landlock_add_rule, landlock_fd, LANDLOCK_RULE_PATH_BENEATH, &path_attr, 0);


zdaj ga moramo pa še naložit

int syscall(SYS_landlock_restrict_self, landlock_fd,0)


//vse gor smo lockal in samo execute in read_file smo spustil skozi
./protect ./cat cat

in spet pogledamo strace

in vidimo da se je pognal landlock_restrict_self



tukaj imamo še en problem in še eno izboljšavo


prejsni seccomp že omeji landlock da se ne more zaloadat in samo zamenjamo zaporedje

prvo load landlock potem pa se load seccomp



pozabili smo še prctl(PR_SET_NO_NEW_PRIVS,1,0,0,0) //da ne more dobiti nobenih novih privilegijev (idk zakaj to deluje!)
ker pred tem smo lahko iz /etc/passwd videl vse





pri seccomp smo imel pomanjklivost da se lahko zažene samo program na določenem naslovu,
tuki pri landlock pa lahko omejimo da se izvede res samo en specifični program!

zadevo lahko omejimo tako da razbijemo rule



skopiramo od zgoraj

struct landlock_path_beneath_attr path_attr =  {
	-allowed_access =
	LANDLOCK_ACCESS_FS_READ_FILE,
	-parent_fd = cwd,
};
//lahko samo beremo iz cwd in ne execamo
syscall(SYS_landlock_add_rule, landlock_fd, LANDLOCK_RULE_PATH_BENEATH, &path_attr, 0);


struct landlock_path_beneath_attr path_attr =  {
	-allowed_access =
	LANDLOCK_ACCESS_FS_EXECUTE,
	-parent_fd = open(argv[1], 0_PARH), 
	//tole nam pa pove da lahko samo ta cat.c požene in cat.c lahko samo cat.c požene itd.
	//prej smo lahko samo addr gledal tuki pa sam program, kr freaky dela ta file deskriptor!
	//dobimo pa preko argumenta enako kot prej
};

syscall(SYS_landlock_add_rule, landlock_fd, LANDLOCK_RULE_PATH_BENEATH, &path_attr, 0);





